trigger:
  branches:
    include:
      - main
      - dev
      - prod

pool:
  vmImage: ubuntu-latest

variables:
  nodeVersion: '18.17.0'
  frontendDirectory: 'frontend'

stages:
- stage: Build
  jobs:
  - job: BuildAndTest
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '$(nodeVersion)'
      displayName: 'Install Node.js'

    - task: Cache@2
      inputs:
        key: 'npm | "$(Agent.OS)" | $(frontendDirectory)/package-lock.json'
        restoreKeys: |
          npm | "$(Agent.OS)"
        path: '$(frontendDirectory)/node_modules'
      displayName: 'Cache npm packages'

    - task: Npm@1
      displayName: 'npm ci'
      inputs:
        command: custom
        workingDir: '$(frontendDirectory)'
        customCommand: 'ci'

    - task: Npm@1
      displayName: 'Run tests'
      inputs:
        command: custom
        workingDir: '$(frontendDirectory)'
        customCommand: 'run test'

    - task: PublishCodeCoverageResults@2
      inputs:
        summaryFileLocation: '$(frontendDirectory)/coverage/cobertura-coverage.xml'
        failIfCoverageEmpty: true

    - task: Npm@1
      displayName: 'Build project'
      inputs:
        command: custom
        workingDir: '$(frontendDirectory)'
        customCommand: 'run build'

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(frontendDirectory)/dist'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
        replaceExistingArchive: true

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: drop
    stages:
- stage: TestAndBuild
  displayName: 'Test and Build'
  jobs:
    # (Your Test job here as defined in your YAML)

- stage: Deploy
  displayName: 'Deploy Django Project'
  dependsOn: TestAndBuild
  condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'prod'))
  jobs:
  - deployment: Deploy
    pool:
      vmImage: ubuntu-20.04
    environment: 'production'
    variables:
      - group: Release
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current  # Only required if you're pulling artifacts
          - task: AzureWebApp@1
            displayName: 'Azure App Service Deploy: Shared Frontend and Backend'
            inputs:
              azureSubscription: 'ASDRestaurant'  # The shared service connection
              appName: '$(WebAppName)'            # Your Azure App Service name
              package: '$(Pipeline.Workspace)/drop/*.zip'
