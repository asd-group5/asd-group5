trigger:
  branches:
    include:
      - main
      - dev
      - prod

pool:
  vmImage: ubuntu-latest

variables:
  system.debug: true
  PYTHON_VERSION: '3.12'

jobs:
- job: Test
  strategy:
    matrix:
      Python311:
        PYTHON_VERSION: '3.11'
      Python312:
        PYTHON_VERSION: '3.12'
    maxParallel: 2

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(PYTHON_VERSION)'
      architecture: 'x64'

  - task: PythonScript@0
    displayName: 'Export project path'
    inputs:
      scriptSource: 'inline'
      script: |
        """Search all subdirectories for `manage.py`."""
        from glob import iglob
        from os import path
        manage_py = next(iglob(path.join('**', 'manage.py'), recursive=True), None)
        if not manage_py:
            raise SystemExit('Could not find a Django project')
        project_location = path.dirname(path.abspath(manage_py))
        print('Found Django project in', project_location)
        print('##vso[task.setvariable variable=projectRoot]{}'.format(project_location))

  - script: |
      python -m pip install --upgrade pip setuptools wheel
      pip install -r $(projectRoot)/requirements.txt
      pip install unittest-xml-reporting coverage
    displayName: 'Install prerequisites'

  - script: |
      pushd '$(projectRoot)'
      python manage.py check
      coverage run manage.py test --testrunner xmlrunner.extra.djangotestrunner.XMLTestRunner --no-input --parallel
      coverage xml
      coverage html
    displayName: 'Run Django tests with coverage'
    workingDirectory: '$(projectRoot)'

  - task: PublishTestResults@2
    inputs:
      testResultsFiles: "**/TEST-*.xml"
      testRunTitle: 'Python $(PYTHON_VERSION)'
    condition: succeededOrFailed()

  - task: PublishCodeCoverageResults@2
    inputs:
      codeCoverageTool: 'cobertura'
      summaryFileLocation: '$(projectRoot)/coverage.xml'
      reportDirectory: '$(projectRoot)/htmlcov'

- job: Build
  dependsOn: Test
  condition: succeeded()
  steps:
  - script: |
      echo "Building Django project..."
      # Add your build steps here, for example:
      # python manage.py collectstatic --noinput
    displayName: 'Build Django Project'

- job: Deploy
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'prod'))
  steps:
  - script: |
      echo "Deploying Django project..."
      # Add your deployment steps here, for example:
      # ansible-playbook deploy.yml
    displayName: 'Deploy Django Project'
    
- stage: BackendDeploy
  displayName: 'Deploy Django Project'
  dependsOn: Build
  jobs:
  - deployment: DeployBackend
    pool:
      vmImage: ubuntu-latest
    environment: $(Build.SourceBranchName)  # Adjust environment as needed
    strategy:
      runOnce:
        deploy:
          steps:
          - script: |
              echo "Deploying Django project..."
              # Your deployment commands here, e.g.:
              # ansible-playbook deploy.yml
            displayName: 'Deploy Django Project'
    condition: eq(variables['Build.SourceBranchName'], 'prod') # Deploy only on prod branch
